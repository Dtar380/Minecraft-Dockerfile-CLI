[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "minecraft-docker-cli"
version = "0.1.0"
description = "CLI tool to enhance and simplify containerization of Minecraft servers"
authors = ["Dtar380"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "src", from = "./"}
]

[tool.poetry.urls]
"Homepage" = "https://github.com/dtar380/Minecraft-Dockerfile-CLI"
"Documentation" = "https://github.com/dtar380/Minecraft-Dockerfile-CLI/docs"
"Repository" = "https://github.com/dtar380/Minecraft-Dockerfile-CLI"
"Bug Tracker" = "https://github.com/Dtar380/Minecraft-Dockerfile-CLI/issues"

[tool.poetry.dependencies]
python = "^3.13"
jinja2 = "^3.1.6"
inquirer = "^3.4.1"
yaspin = "^3.3.0"
click = "^8.3.0"

[tool.poetry.group.dev.dependencies]
black = "^25.9.0"
mypy = "^1.18.2"
isort = "^7.0.0"
pre-commit = "^4.3.0"
flake8 = "^7.3.0"
poethepoet = "^0.37.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.4.2"

[tool.poetry.group.docs.dependencies]
sphinx = "^8.2.3"
sphinx-rtd-theme = "^3.0.2"
myst-parser = "^4.0.1"

[tool.poetry.scripts]
minecraft-docker-cli = "src.__main__:main"

# Tareas de desarrollo con poethepoet
[tool.poe.tasks]
# Servidor de desarrollo
start-dev = "uvicorn APP.main:app --reload --host 0.0.0.0 --port 8000"
start-prod = "gunicorn APP.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000"

# Testing
test = "pytest tests"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=APP --cov=tests"
test-html = "pytest --cov-report=html --cov-config=pyproject.toml --cov=APP --cov=tests"

# Linting y type checking
type-check = "mypy --install-types --non-interactive APP tests"
lint-check = "flake8 APP tests"

# Formateo
format = "black APP tests"
import-sort = "isort APP tests"

# Tareas combinadas
format-all = ["import-sort", "format"]
lint-all = ["type-check", "lint-check"]
check-all = ["format-all", "lint-all", "test"]

# Configuración para herramientas de desarrollo
[tool.black]
line-length = 80
target-version = ["py313"]
skip-string-normalization = false
skip-magic-trailing-comma = false
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directorios generados
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | build
  | dist
  | migrations  # Archivos de migración de DB
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 80
multi_line_output = 3
ensure_newline_before_comments = true

known_first_party = ["APP"]

known_third_party = [
    "fastapi",
    "uvicorn",
    "sqlmodel",
    "pydantic",
    "yfinance",
    "jinja2"
]

extra_standard_library = ["typing_extensions"]

sections = [
    "FUTURE",      # from __future__ import
    "STDLIB",      # import os, sys
    "THIRDPARTY",  # import fastapi
    "FIRSTPARTY",  # import APP
    "LOCALFOLDER"  # from . import
]

force_single_line = false
force_sort_within_sections = true

add_imports = [
    "from __future__ import annotations"
]

skip_glob = [
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*"
]

[tool.mypy]
python_version = "3.13"

# === CONFIGURACIONES ESTRICTAS ===
# Requerir anotaciones de tipos
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

# Verificar llamadas a funciones sin tipos
check_untyped_defs = true

# No permitir Any implícito
no_implicit_optional = true
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = true
disallow_subclassing_any = true

# === ADVERTENCIAS ===
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# === VERIFICACIONES ADICIONALES ===
strict_equality = true
strict_optional = true

# === CONFIGURACIÓN DE ERRORES ===
show_error_codes = true
show_column_numbers = true
show_error_context = true
color_output = true
error_summary = true

# === PATHS Y ARCHIVOS ===
mypy_path = ["APP"]
namespace_packages = true
exclude = [
    "tests/",
    "migrations/",
    "venv/",
    "__pycache__/"
]

[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "fastapi_mail.*",
    "dotenv.*",
    "sqlmodel.*",
    "pydantic.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=APP",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
